# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:

services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../src/*'
    exclude: '../src/{Type,DependencyInjection,Entity,Migrations,Tests,Error,Kernel.php}'

  "api_platform.graphql.resolver.stage.serialize":
    class: App\GraphQl\Resolver\Stage\SerializeStage
    arguments:
      - "@api_platform.metadata.resource.metadata_factory"
      - "@serializer"
      - "@api_platform.graphql.serializer.context_builder"
      - "@api_platform.pagination"

  api_platform.graphql.serializer.context_builder:
    class: App\GraphQl\Serializer\SerializerContextBuilder
    arguments:
      - "@api_platform.metadata.resource.metadata_factory"
      - "@api_platform.name_converter"

  App\GraphQl\Serializer\SaveForLaterContextBuilder:
    decorates: 'api_platform.graphql.serializer.context_builder'
    arguments: [ '@App\GraphQl\Serializer\SaveForLaterContextBuilder.inner' ]
    autoconfigure: false

  App\Type\Definition\Payload\CreateFromCartSaveForLaterPayload:
    arguments:
      - "@api_platform.graphql.types_container"
    tags:
      - { name: api_platform.graphql.type }

  App\Type\Definition\Input\CartType: ~
  App\Type\Definition\Input\CartItemType: ~

  App\Type\Definition\Cart.Output:
    class: App\Type\Definition\Output\CartType
    arguments:
      - name: OutputCart
      - true
      - "@api_platform.graphql.types_container"
    tags:
      - { name: api_platform.graphql.type }

  App\Type\Definition\CartItem.Output:
    class: App\Type\Definition\Output\CartItemType
    arguments:
      - name: OutputCartItem
      - true
    tags:
      - { name: api_platform.graphql.type }


  App\Type\Definition\Uuid.TargetItemId:
    class: App\Type\Definition\Uuid
    arguments:
      - name: TargetItemId
    tags:
      - { name: api_platform.graphql.type }

  App\Type\Definition\Uuid.CartItemId:
    class: App\Type\Definition\Uuid
    arguments:
      - name: CartItemId
    tags:
      - { name: api_platform.graphql.type }

  App\Type\Definition\Uuid.OutputCartId:
    class: App\Type\Definition\Uuid
    arguments:
      - name: OutputCartId
    tags:
      - { name: api_platform.graphql.type }
  # controllers are imported separately to make sure services can be injected
  # as action arguments even if you don't extend any base controller class
  App\Controller\:
    resource: '../src/Controller'
    tags: [ 'controller.service_arguments' ]